using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the TblAccount class.
	/// </summary>
    [Serializable]
	public partial class TblAccountCollection : ActiveList<TblAccount, TblAccountCollection>
	{	   
		public TblAccountCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblAccountCollection</returns>
		public TblAccountCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblAccount o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblAccounts table.
	/// </summary>
	[Serializable]
	public partial class TblAccount : ActiveRecord<TblAccount>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblAccount()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblAccount(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblAccount(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblAccount(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblAccounts", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 250;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = false;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				
						colvarFullName.DefaultSetting = @"('')";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 250;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = false;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				
						colvarEmail.DefaultSetting = @"('')";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.String;
				colvarPhone.MaxLength = 250;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = false;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				
						colvarPhone.DefaultSetting = @"('')";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);
				
				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 250;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				
						colvarPassword.DefaultSetting = @"('')";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);
				
				TableSchema.TableColumn colvarTotalPI = new TableSchema.TableColumn(schema);
				colvarTotalPI.ColumnName = "TotalPI";
				colvarTotalPI.DataType = DbType.Decimal;
				colvarTotalPI.MaxLength = 0;
				colvarTotalPI.AutoIncrement = false;
				colvarTotalPI.IsNullable = false;
				colvarTotalPI.IsPrimaryKey = false;
				colvarTotalPI.IsForeignKey = false;
				colvarTotalPI.IsReadOnly = false;
				
						colvarTotalPI.DefaultSetting = @"((0))";
				colvarTotalPI.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPI);
				
				TableSchema.TableColumn colvarBalancePI = new TableSchema.TableColumn(schema);
				colvarBalancePI.ColumnName = "BalancePI";
				colvarBalancePI.DataType = DbType.Decimal;
				colvarBalancePI.MaxLength = 0;
				colvarBalancePI.AutoIncrement = false;
				colvarBalancePI.IsNullable = false;
				colvarBalancePI.IsPrimaryKey = false;
				colvarBalancePI.IsForeignKey = false;
				colvarBalancePI.IsReadOnly = false;
				
						colvarBalancePI.DefaultSetting = @"((0))";
				colvarBalancePI.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBalancePI);
				
				TableSchema.TableColumn colvarDepositPI = new TableSchema.TableColumn(schema);
				colvarDepositPI.ColumnName = "DepositPI";
				colvarDepositPI.DataType = DbType.Decimal;
				colvarDepositPI.MaxLength = 0;
				colvarDepositPI.AutoIncrement = false;
				colvarDepositPI.IsNullable = false;
				colvarDepositPI.IsPrimaryKey = false;
				colvarDepositPI.IsForeignKey = false;
				colvarDepositPI.IsReadOnly = false;
				
						colvarDepositPI.DefaultSetting = @"((0))";
				colvarDepositPI.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepositPI);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("TblAccounts",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("FullName")]
		[Bindable(true)]
		public string FullName 
		{
			get { return GetColumnValue<string>(Columns.FullName); }
			set { SetColumnValue(Columns.FullName, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("Phone")]
		[Bindable(true)]
		public string Phone 
		{
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		  
		[XmlAttribute("Password")]
		[Bindable(true)]
		public string Password 
		{
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		  
		[XmlAttribute("TotalPI")]
		[Bindable(true)]
		public decimal TotalPI 
		{
			get { return GetColumnValue<decimal>(Columns.TotalPI); }
			set { SetColumnValue(Columns.TotalPI, value); }
		}
		  
		[XmlAttribute("BalancePI")]
		[Bindable(true)]
		public decimal BalancePI 
		{
			get { return GetColumnValue<decimal>(Columns.BalancePI); }
			set { SetColumnValue(Columns.BalancePI, value); }
		}
		  
		[XmlAttribute("DepositPI")]
		[Bindable(true)]
		public decimal DepositPI 
		{
			get { return GetColumnValue<decimal>(Columns.DepositPI); }
			set { SetColumnValue(Columns.DepositPI, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFullName,string varEmail,string varPhone,string varPassword,decimal varTotalPI,decimal varBalancePI,decimal varDepositPI)
		{
			TblAccount item = new TblAccount();
			
			item.FullName = varFullName;
			
			item.Email = varEmail;
			
			item.Phone = varPhone;
			
			item.Password = varPassword;
			
			item.TotalPI = varTotalPI;
			
			item.BalancePI = varBalancePI;
			
			item.DepositPI = varDepositPI;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varFullName,string varEmail,string varPhone,string varPassword,decimal varTotalPI,decimal varBalancePI,decimal varDepositPI)
		{
			TblAccount item = new TblAccount();
			
				item.Id = varId;
			
				item.FullName = varFullName;
			
				item.Email = varEmail;
			
				item.Phone = varPhone;
			
				item.Password = varPassword;
			
				item.TotalPI = varTotalPI;
			
				item.BalancePI = varBalancePI;
			
				item.DepositPI = varDepositPI;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FullNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PasswordColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TotalPIColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BalancePIColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DepositPIColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string FullName = @"FullName";
			 public static string Email = @"Email";
			 public static string Phone = @"Phone";
			 public static string Password = @"Password";
			 public static string TotalPI = @"TotalPI";
			 public static string BalancePI = @"BalancePI";
			 public static string DepositPI = @"DepositPI";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
